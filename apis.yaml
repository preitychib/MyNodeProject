openapi: 3.0.0
info:
  title: Node.js Task API
  description: Node.js + MongoDB - API with JWT authentication
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Local development server

paths:
  /api/users/login:
    post:
      summary: Authenticate account credentials and return user details with JWT token
      description: Accounts must be verified before authenticating.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "yourmail@example.com"
                password:
                  type: string
                  example: "pass123"
              required:
                - email
                - password
      responses:
        "200":
          description: Account details, a JWT access token and a refresh token cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  name:
                    type: string
                    example: "Your Name"
                  email:
                    type: string
                    example: "youremail@example.com"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: Invalid credentails
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"

  /api/users/me:
    get:
      summary: Get details of user
      description: Details of current logged in user
      operationId: getMe
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get details of user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  name:
                    type: string
                    example: "Your Name"
                  email:
                    type: string
                    example: "youremail@example.com"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
                  v:
                    type: string
                    example: "version number"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /api/users:
    post:
      summary: Register a new user account
      description: Register a new user Required fields are- name,email,password
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Your Name"
                email:
                  type: string
                  example: "youremail@example.com"
                password:
                  type: string
                  example: "pass123"
              required:
                - lastName
                - email
                - password
      responses:
        "200":
          description: The registration request was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful"
  /api/tasks:
    get:
      summary: Get a list of all tasks of user
      description: User can access only their task details
      operationId: getTasks
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of all user Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    user:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    tittle:
                      type: string
                      example: "Study Javascript"
                    description:
                      type: string
                      example: "Learn the basics of Javascript"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new Task of the given user
      description: Restricted to logged in users.
      operationId: addTask
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tittle:
                  type: string
                  example: "Study Javascript"
                description:
                  type: string
                  example: "Learn the basics of Javascript"
              required:
                - title
                - description
      responses:
        "200":
          description: Task created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Learn Javascript"
                  description:
                    type: string
                    example: "learn basics of javascript"
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  v:
                    type: string
                    example: "version"
        "400":
          description: Need to add all the required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please add the required fields"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /api/taks/{id}:
    parameters:
      - in: path
        name: id
        description: Task id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    put:
      summary: Update an task
      description: User can update only their tasks
      operationId: updateTask
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Learn Javascript"
                description:
                  type: string
                  example: "learn basics of javascript"
      responses:
        "200":
          description: Task updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Learn Javascript"
                  description:
                    type: string
                    example: "learn basics of javascript"
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  v:
                    type: string
                    example: "version"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete an task
      description: User can update only their task
      operationId: deleteTask
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"
