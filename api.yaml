swagger: "2.0"
info:
  title: Task API
  description: This is my Task API Documentation
  version: 1.0
  contact:
    email: preeti.chib2015@gmail.com
  liscence:
    name: Apache 2.0
    url: "http://www.apache.org/liscences/LIS"
  servers:
    -url: http://localhost:5000
    description: This is my local Server
    -url: http://example.com/
    description: This is my original URL

schemes: [https,http]


paths:
  #Register a User
  /api:
    post:
      summary: Register a new user
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
           $ref: "#/components/schemas/User"
      responses:
        '200':
          description: OK

  # Login a user
  /api/login:
    post:
      summary: Login/Authenticate a user
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
               type: object
               required:
                 - email
                 - password
               properties:
                 email:
                   type: string
                 password:
                   type: string
      responses:
        '200':
          description: OK

  /api/me:
    #Returns current user information
    get:
      security:
        - bearerAuth: []
      summary: Returns all the user information
      description: Information of current user 
      responses:
        200:    # status code
          description: Successul Response
          schema:  
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              email:
                type: string
              createdAt:
                type: string
              updatedAt:
                type: string
          
# Task API Routes
  /api/tasks:
    #Returns all tasks
    get:
      security:
        - bearerAuth: []
      summary: Returns a list of tasks of a user.
      description: Tasks of user who have registered themselves
      responses:
        200:    # status code
          description: Successul Response
          schema: 
            type: array
            items: 
              type: object
              properties:
                id:
                  type: integer
                tittle:
                  type: string
                description:
                  type: string

    #Add new Task
    post:
      security:
        - bearerAuth: []
      summary: Adds a new task of the user
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
           $ref: "#/components/schemas/Task"
      responses:
        '200':
          description: OK

  #Delete Task 
  /api/tasks/{id}:
    delete:
      security:
        - bearerAuth: []
      summary: Delete Task of given ID.
      description: Returns id of deleted task of the user 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type : integer
            format: int64
      responses: 
        '200':
          description: OK
          schema:
            type: object
            example: {id: 2}

  #Update Task 
    put:
      security:
        - bearerAuth: []
      summary: Updates Task of given ID.
      description: Returns Updated task of the user 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type : integer
            format: int64
      responses: 
        '200':
          description: OK
          schema:
            type: object
            example: {id: 2}


components:
  schemas:
    Task:
      type: object
      properties:
        tittle:
          type: string
        description:
          type: string
    User:
      type: object
      properties: 
        name: 
          type: string
        email:
          type: string
        password:
          type: string
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
    type: http
    scheme: bearer
    bearerFormat: JWT  
security:
  bearerAuth: []
